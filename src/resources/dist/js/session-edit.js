!function($){void 0===Craft.Events&&(Craft.Events={}),Craft.Events.SessionEdit=Garnish.Base.extend({init:function(t){this.$pane=$("#"+t),this.$container=this.$pane.parents("form"),this.$startDate=this.$container.find('[data-attribute="start-date"]'),this.$startDateInput=this.$startDate.find('.datewrapper input[type="text"]'),this.$startTimeInput=this.$startDate.find('.timewrapper input[type="text"]'),this.$startDateOffsetInput=this.$container.find('[name*="[occurrenceRange][startDateOffset]"]'),this.$endDate=this.$container.find('[data-attribute="end-date"]'),this.$endDateInput=this.$endDate.find('.datewrapper input[type="text"]'),this.$endTimeInput=this.$endDate.find('.timewrapper input[type="text"]'),this.$endDateOffsetInput=this.$container.find('[name*="[occurrenceRange][endDateOffset]"]'),this.$frequency=this.$container.find('[data-attribute="frequency-data-type"] select'),this.frequency=this.$frequency.length?this.$frequency.val():null,this.$occurrenceType=this.$container.find(".occurrence-range-field input"),this.$occurrenceTypeStartDate=this.$container.find('[data-attribute="occurrence-range-start-date"]'),this.$occurrenceTypeStartDateInput=this.$occurrenceTypeStartDate.find('.datewrapper input[type="text"]'),this.$occurrenceTypeEndDate=this.$container.find('[data-attribute="occurrence-range-end-date"]'),this.$occurrenceTypeEndDateInput=this.$occurrenceTypeEndDate.find('.datewrapper input[type="text"]'),this.currentStartDate=this.getDate(this.$startDate),this.currentEndDate=this.getDate(this.$endDate),this.addListener(this.$startDateInput,"change","updateWeekRepeatOptions"),this.addListener(this.$startTimeInput,"change","updateWeekRepeatOptions"),this.addListener(this.$startDateInput,"change","updateMonthRepeatOptions"),this.addListener(this.$startTimeInput,"change","updateMonthRepeatOptions"),this.addListener(this.$startDateInput,"change","updateOccurenceHint"),this.addListener(this.$startTimeInput,"change","updateOccurenceHint"),this.addListener(this.$endDateInput,"change","updateOccurenceHint"),this.addListener(this.$endTimeInput,"change","updateOccurenceHint"),this.addListener(this.$occurrenceType,"change","updateOccurenceHint"),this.addListener(this.$occurrenceTypeStartDateInput,"change","updateOccurenceHint"),this.addListener(this.$occurrenceTypeEndDateInput,"change","updateOccurenceHint"),this.addListener(this.$startDateInput,"change","updateOffsets"),this.addListener(this.$startTimeInput,"change","updateOffsets"),this.addListener(this.$endDateInput,"change","updateOffsets"),this.addListener(this.$endTimeInput,"change","updateOffsets"),this.addListener(this.$occurrenceType,"change","onToggleChange"),this.$startDateInput.trigger("change"),this.$endDateInput.trigger("change"),this.$occurrenceType.trigger("change")},updateOffsets(t){let e=this.getDate(this.$startDate),n=this.getDate(this.$endDate);if(!e||!n)return;const a=Math.floor((e-this.currentStartDate)/1e3),i=Math.floor((n-this.currentEndDate)/1e3);this.$startDateOffsetInput.val(a),this.$endDateOffsetInput.val(i)},onToggleChange(t){$(t.target).prop("checked")&&"custom"===$(t.target).val()?this.$container.find(".apply-changes--custom").removeClass("hidden"):this.$container.find(".apply-changes--custom").addClass("hidden")},updateOccurenceHint(t){const e=this.$container.find(".occurrence-hint");if(!e.length)return;let n=this.getDate(this.$startDate),a=this.getDate(this.$endDate);if(!n||!a)return;let i=n-this.currentStartDate,r=a-this.currentEndDate,s=this.getDifferenceMessage(i,"start"),c=this.getDifferenceMessage(r,"finish"),h="",d="";const u=undefined;switch(this.$container.find(".occurrence-range-field input:checked").val()){case"single":d=Craft.t("events","This occurrence");break;case"all":d=Craft.t("events","All occurrences");break;case"future":d=Craft.t("events","This and all future occurrences");break;case"custom":let t=this.getDate(this.$container.find('[data-attribute="occurrence-range-start-date"]')),e=this.getDate(this.$container.find('[data-attribute="occurrence-range-end-date"]'));if(t&&e){let n=navigator.language||"default";d=Craft.t("events","All occurrences between {start} and {end}",{start:t.toLocaleString(n,{year:"numeric",month:"long",day:"2-digit",hour:"numeric",minute:"2-digit",hour12:!0}),end:e.toLocaleString(n,{year:"numeric",month:"long",day:"2-digit",hour:"numeric",minute:"2-digit",hour12:!0})})}else h="";break;default:d=Craft.t("events","This occurrence")}d&&s&&c?h=Craft.t("events","{occurrenceText} will now {startMessage} and {endMessage}.",{occurrenceText:d,startMessage:s,endMessage:c}):d&&s?h=Craft.t("events","{occurrenceText} will now {startMessage}.",{occurrenceText:d,startMessage:s}):d&&c&&(h=Craft.t("events","{occurrenceText} will now {endMessage}.",{occurrenceText:d,endMessage:c})),""===h?e.addClass("hidden"):e.removeClass("hidden"),e.find(".hint-text").text(h)},updateWeekRepeatOptions(t){let e=this.getDate(this.$startDate),n;if(!e)return;const a=undefined;let i=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"][e.getDay()];if(this.$weeklyRepeatCheckboxes=this.$container.find('[data-attribute="frequency-data-weekly-repeat-days"] input[type="checkbox"]'),!this.$weeklyRepeatCheckboxes.length)return;this.$weeklyRepeatCheckboxes.off("change");let r=this.$weeklyRepeatCheckboxes.filter(`[value="${i}"]`);r.length&&(r.prop("checked",!0),r.on("change",(function(){$(this).prop("checked")||$(this).prop("checked",!0)})))},updateMonthRepeatOptions(t){let e=this.getDate(this.$startDate);if(!e)return;let n=e.getDate(),a=this.getDaySuffix(n),i=navigator.language||"default",r=e.toLocaleString(i,{weekday:"long"}),s=this.getOrdinalWeek(e,i),c=Craft.t("events","On the {date}",{date:`${n}${a}`}),h=Craft.t("events","On the {date}",{date:`${s} ${r}`});this.$monthlyRepeatSelect=this.$container.find('[data-attribute="frequency-data-monthly-repeat-day"] select'),this.$monthlyRepeatSelect.length&&($(this.$monthlyRepeatSelect).empty(),$(this.$monthlyRepeatSelect).append(new Option(c,"onDate")),$(this.$monthlyRepeatSelect).append(new Option(h,"onDay")))},getDate(t){if(!t||!t.length)return null;const e=t.find('.datewrapper input[type="text"]'),n=t.find('.timewrapper input[type="text"]');if(!e.length&&n.length)return n.timepicker("getTime");if(e.length&&!n.length)return e.datepicker("getDate");if(e.length&&n.length){var a=e.datepicker("getDate"),i;return n.timepicker("getTime",a)}return null},getDaySuffix(t){if(t>3&&t<21)return"th";switch(t%10){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}},getOrdinalWeek(t,e){let n=t.getDate(),a=Math.floor((n-1)/7)+1,i=new Intl.ListFormat(e,{type:"unit",style:"narrow"}),r;return["first","second","third","fourth","fifth"][a-1]},getDifferenceMessage:function(t,e){if(0===t)return"";let n=t>0;t=Math.abs(t);let a=Math.floor(t/6e4%60),i=Math.floor(t/36e5%24),r=Math.floor(t/864e5),s=[];const c=[];r>0&&c.push(Craft.t("events","{num, number} {num, plural, =1{day} other{days}}",{num:r})),i>0&&c.push(Craft.t("events","{num, number} {num, plural, =1{hour} other{hours}}",{num:i})),a>0&&c.push(Craft.t("events","{num, number} {num, plural, =1{minute} other{minutes}}",{num:a}));let h=c[0]||"";return 2===c.length?h=Craft.t("events","{diff1} and {diff2}",{diff1:c[0],diff2:c[1]}):3===c.length&&(h=Craft.t("events","{diff1}, {diff2} and {diff3}",{diff1:c[0],diff2:c[1],diff3:c[2]})),"start"===e?n?s.push(Craft.t("events","start {diff} later",{diff:h})):s.push(Craft.t("events","start {diff} earlier",{diff:h})):"finish"===e&&(n?s.push(Craft.t("events","finish {diff} later",{diff:h})):s.push(Craft.t("events","finish {diff} earlier",{diff:h}))),2===s.length?Craft.t("events","{diff1} and {diff2}",{diff1:s[0],diff2:c[1]}):s.join("")}})}(jQuery);
//# sourceMappingURL=session-edit.js.map